{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { GameState } from '../../types/index.ts';\nconst initialState = {\n  board: Array(20).fill(null).map(() => Array(10).fill(0)),\n  score: 0,\n  level: 1,\n  lines: 0,\n  gameState: GameState.WAITING,\n  isPaused: false\n};\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateBoard: (state, action) => {\n      state.board = action.payload;\n    },\n    updateScore: (state, action) => {\n      state.score = action.payload;\n    },\n    updateGameState: (state, action) => {\n      state.gameState = action.payload;\n    },\n    togglePause: state => {\n      state.isPaused = !state.isPaused;\n    }\n  }\n});\nexport const {\n  updateBoard,\n  updateScore,\n  updateGameState,\n  togglePause\n} = gameSlice.actions;\nexport default gameSlice.reducer;","map":{"version":3,"names":["createSlice","GameState","initialState","board","Array","fill","map","score","level","lines","gameState","WAITING","isPaused","gameSlice","name","reducers","updateBoard","state","action","payload","updateScore","updateGameState","togglePause","actions","reducer"],"sources":["/home/jiglesia/Documents/red-tetris/client/src/store/slices/gameSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { GameState, Board } from '../../types/index.ts';\n\ninterface GameSliceState {\n  board: Board;\n  score: number;\n  level: number;\n  lines: number;\n  gameState: GameState;\n  isPaused: boolean;\n}\n\nconst initialState: GameSliceState = {\n  board: Array(20).fill(null).map(() => Array(10).fill(0)),\n  score: 0,\n  level: 1,\n  lines: 0,\n  gameState: GameState.WAITING,\n  isPaused: false,\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateBoard: (state, action: PayloadAction<Board>) => {\n      state.board = action.payload;\n    },\n    updateScore: (state, action: PayloadAction<number>) => {\n      state.score = action.payload;\n    },\n    updateGameState: (state, action: PayloadAction<GameState>) => {\n      state.gameState = action.payload;\n    },\n    togglePause: (state) => {\n      state.isPaused = !state.isPaused;\n    },\n  },\n});\n\nexport const { updateBoard, updateScore, updateGameState, togglePause } = gameSlice.actions;\nexport default gameSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAC7D,SAASC,SAAS,QAAe,sBAAsB;AAWvD,MAAMC,YAA4B,GAAG;EACnCC,KAAK,EAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;EACxDE,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,CAAC;EACRC,SAAS,EAAET,SAAS,CAACU,OAAO;EAC5BC,QAAQ,EAAE;AACZ,CAAC;AAED,MAAMC,SAAS,GAAGb,WAAW,CAAC;EAC5Bc,IAAI,EAAE,MAAM;EACZZ,YAAY;EACZa,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAA4B,KAAK;MACpDD,KAAK,CAACd,KAAK,GAAGe,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDC,WAAW,EAAEA,CAACH,KAAK,EAAEC,MAA6B,KAAK;MACrDD,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,eAAe,EAAEA,CAACJ,KAAK,EAAEC,MAAgC,KAAK;MAC5DD,KAAK,CAACP,SAAS,GAAGQ,MAAM,CAACC,OAAO;IAClC,CAAC;IACDG,WAAW,EAAGL,KAAK,IAAK;MACtBA,KAAK,CAACL,QAAQ,GAAG,CAACK,KAAK,CAACL,QAAQ;IAClC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEI,WAAW;EAAEI,WAAW;EAAEC,eAAe;EAAEC;AAAY,CAAC,GAAGT,SAAS,CAACU,OAAO;AAC3F,eAAeV,SAAS,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}