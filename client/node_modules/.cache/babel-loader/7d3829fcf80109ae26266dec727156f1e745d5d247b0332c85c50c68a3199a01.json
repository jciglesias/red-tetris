{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';import{GameState}from'../../types';const initialState={board:Array(20).fill(null).map(()=>Array(10).fill(0)),score:0,level:1,lines:0,gameState:GameState.WAITING,isPaused:false};const gameSlice=createSlice({name:'game',initialState,reducers:{updateBoard:(state,action)=>{state.board=action.payload;},updateScore:(state,action)=>{state.score=action.payload;},updateGameState:(state,action)=>{state.gameState=action.payload;},togglePause:state=>{state.isPaused=!state.isPaused;}}});export const{updateBoard,updateScore,updateGameState,togglePause}=gameSlice.actions;export default gameSlice.reducer;","map":{"version":3,"names":["createSlice","GameState","initialState","board","Array","fill","map","score","level","lines","gameState","WAITING","isPaused","gameSlice","name","reducers","updateBoard","state","action","payload","updateScore","updateGameState","togglePause","actions","reducer"],"sources":["/home/jiglesia/Documents/red-tetris/client/src/store/slices/gameSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { GameState, Board } from '../../types';\n\ninterface GameSliceState {\n  board: Board;\n  score: number;\n  level: number;\n  lines: number;\n  gameState: GameState;\n  isPaused: boolean;\n}\n\nconst initialState: GameSliceState = {\n  board: Array(20).fill(null).map(() => Array(10).fill(0)),\n  score: 0,\n  level: 1,\n  lines: 0,\n  gameState: GameState.WAITING,\n  isPaused: false,\n};\n\nconst gameSlice = createSlice({\n  name: 'game',\n  initialState,\n  reducers: {\n    updateBoard: (state, action: PayloadAction<Board>) => {\n      state.board = action.payload;\n    },\n    updateScore: (state, action: PayloadAction<number>) => {\n      state.score = action.payload;\n    },\n    updateGameState: (state, action: PayloadAction<GameState>) => {\n      state.gameState = action.payload;\n    },\n    togglePause: (state) => {\n      state.isPaused = !state.isPaused;\n    },\n  },\n});\n\nexport const { updateBoard, updateScore, updateGameState, togglePause } = gameSlice.actions;\nexport default gameSlice.reducer;"],"mappings":"AAAA,OAASA,WAAW,KAAuB,kBAAkB,CAC7D,OAASC,SAAS,KAAe,aAAa,CAW9C,KAAM,CAAAC,YAA4B,CAAG,CACnCC,KAAK,CAAEC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,IAAMF,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CACxDE,KAAK,CAAE,CAAC,CACRC,KAAK,CAAE,CAAC,CACRC,KAAK,CAAE,CAAC,CACRC,SAAS,CAAET,SAAS,CAACU,OAAO,CAC5BC,QAAQ,CAAE,KACZ,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGb,WAAW,CAAC,CAC5Bc,IAAI,CAAE,MAAM,CACZZ,YAAY,CACZa,QAAQ,CAAE,CACRC,WAAW,CAAEA,CAACC,KAAK,CAAEC,MAA4B,GAAK,CACpDD,KAAK,CAACd,KAAK,CAAGe,MAAM,CAACC,OAAO,CAC9B,CAAC,CACDC,WAAW,CAAEA,CAACH,KAAK,CAAEC,MAA6B,GAAK,CACrDD,KAAK,CAACV,KAAK,CAAGW,MAAM,CAACC,OAAO,CAC9B,CAAC,CACDE,eAAe,CAAEA,CAACJ,KAAK,CAAEC,MAAgC,GAAK,CAC5DD,KAAK,CAACP,SAAS,CAAGQ,MAAM,CAACC,OAAO,CAClC,CAAC,CACDG,WAAW,CAAGL,KAAK,EAAK,CACtBA,KAAK,CAACL,QAAQ,CAAG,CAACK,KAAK,CAACL,QAAQ,CAClC,CACF,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEI,WAAW,CAAEI,WAAW,CAAEC,eAAe,CAAEC,WAAY,CAAC,CAAGT,SAAS,CAACU,OAAO,CAC3F,cAAe,CAAAV,SAAS,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}